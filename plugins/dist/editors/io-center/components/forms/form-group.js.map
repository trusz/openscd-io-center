{"version":3,"file":"form-group.js","sourceRoot":"","sources":["../../../../../src/editors/io-center/components/forms/form-group.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAGjE,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAC+B,qBAAgB,GAA+B,EAAE,CAAC;QAC1C,gBAAW,GAAY,KAAK,CAAC;IAuC3E,CAAC;IArCC,aAAa,CAAC,IAAY,EAAE,eAAwB;QAClD,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,uBAAuB,EAAE,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC;QAC9C,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,cAAc,CAAC,IAAY,EAAE,OAAgB;QAC3C,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QACtC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,cAAc;QACZ,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC/C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,yCAAyC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC9E,KAAa,CAAC,UAAU,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,uBAAuB,EAAE;YAC1D,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE;YACrC,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC,CAAC;IACN,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,eAAe,CAAC;IAC7B,CAAC;CACF,CAAA;AAxC6B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;mDAA2D;AAC1C;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CAA8B;AAF9D,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAyCrB;SAzCY,SAAS","sourcesContent":["import { LitElement, html, property, customElement } from 'lit-element';\n\n@customElement('form-group')\nexport class FormGroup extends LitElement {\n  @property({ type: Object }) private validationStatus: { [key: string]: boolean } = {};\n  @property({ type: Boolean, reflect: true }) isFormValid: boolean = false;\n\n  registerInput(name: string, initialValidity: boolean) {\n    console.debug('Registering input', name, 'with initial validity', initialValidity);\n    this.validationStatus[name] = initialValidity;\n    this.checkFormValidity();\n  }\n\n  updateValidity(name: string, isValid: boolean) {\n    console.debug('Updating validity for', name, isValid);\n    this.validationStatus[name] = isValid;\n    this.checkFormValidity();\n  }\n\n  resetFormGroup() {\n    console.debug('Resetting form group');\n    Object.keys(this.validationStatus).forEach(key => {\n      this.validationStatus[key] = false;\n    });\n\n    this.querySelectorAll('text-input, number-input, selection-box').forEach(input => {\n      (input as any).resetInput();\n    });\n\n    this.checkFormValidity();\n  }\n\n  private checkFormValidity() {\n    this.isFormValid = Object.values(this.validationStatus).every(valid => valid);\n    this.dispatchEvent(new CustomEvent('form-validity-changed', {\n      detail: { isValid: this.isFormValid },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n"]}