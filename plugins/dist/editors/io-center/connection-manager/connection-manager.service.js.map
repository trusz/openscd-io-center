{"version":3,"file":"connection-manager.service.js","sourceRoot":"","sources":["../../../../src/editors/io-center/connection-manager/connection-manager.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs';\nimport {ConnectionObject} from \"./connection-object\";\n\nexport class ConnectionManagerService {\n  private static instance: ConnectionManagerService;\n\n  #connectionObjects: BehaviorSubject<ConnectionObject[]> = new BehaviorSubject<ConnectionObject[]>([]);\n  connectionObjects$ = this.#connectionObjects.asObservable();\n\n  #connectionAdded: Subject<ConnectionObject> = new Subject<ConnectionObject>();\n  connectionAdded$ = this.#connectionAdded.asObservable();\n\n  #connectionDeleted: Subject<ConnectionObject> = new Subject<ConnectionObject>();\n  connectionDeleted$ = this.#connectionDeleted.asObservable();\n\n  private constructor() {}\n\n  public static getInstance(): ConnectionManagerService {\n    if (!ConnectionManagerService.instance) {\n      ConnectionManagerService.instance = new ConnectionManagerService();\n    }\n    return ConnectionManagerService.instance;\n  }\n\n  get connectionObjects() {\n    return this.#connectionObjects.getValue();\n  }\n\n  private checkIfConnectionExists(sourceConnectorId: string, targetConnectorId: string) {\n    const connectionObjects = this.#connectionObjects.getValue();\n    return connectionObjects.find((c) => c.sourceConnectorId === sourceConnectorId && c.targetConnectorId === targetConnectorId) ||\n      connectionObjects.find((c) => c.sourceConnectorId === targetConnectorId && c.targetConnectorId === sourceConnectorId);\n  }\n\n  setConnectionObjects(connectionObjects: ConnectionObject[]) {\n    this.#connectionObjects.next(connectionObjects);\n  }\n\n  addConnectionObject(connectionObject: ConnectionObject): boolean {\n    if (this.checkIfConnectionExists(connectionObject.sourceConnectorId, connectionObject.targetConnectorId)) {\n      return false;\n    }\n\n    const connectionObjects = this.#connectionObjects.getValue();\n    connectionObjects.push(connectionObject);\n    this.#connectionObjects.next(connectionObjects);\n    this.#connectionAdded.next(connectionObject);\n    return true;\n  }\n\n  deleteConnectionObjectById(id: string) {\n    const connectionObjects = this.#connectionObjects.getValue();\n    const index = connectionObjects.findIndex((d) => d.id === id);\n    if (index > -1) {\n      const connectionObject = connectionObjects[index];\n      connectionObjects.splice(index, 1);\n      this.#connectionObjects.next(connectionObjects);\n      this.#connectionDeleted.next(connectionObject);\n    }\n  }\n\n  findConnectionToOrFromConnector(connectorId: string) {\n    const connectionObjects = this.#connectionObjects.getValue();\n    return connectionObjects.find((c) => c.sourceConnectorId === connectorId || c.targetConnectorId === connectorId);\n  }\n\n  clearConnections() {\n    this.#connectionObjects.next([]);\n  }\n}\n"]}