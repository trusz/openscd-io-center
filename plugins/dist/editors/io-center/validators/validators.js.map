{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../src/editors/io-center/validators/validators.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,iBAAiB,CAAC,KAAa;IAC7C,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,GAAW;IAC5C,OAAO,CAAC,KAAa,EAAiB,EAAE;QACtC,OAAO,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAChE,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,GAAW;IAC5C,OAAO,CAAC,KAAa,EAAiB,EAAE;QACtC,OAAO,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAChE,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,GAAW;IACnD,OAAO,CAAC,KAAa,EAAiB,EAAE;QACtC,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACzE,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,KAAa;IAC1C,MAAM,YAAY,GAAG,4BAA4B,CAAC;IAClD,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAsB;IACpD,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAAC;AACvE,CAAC","sourcesContent":["export function requiredValidator(value: string): string | null {\n  return !value ? 'This field is required' : null;\n}\n\nexport function maxLengthValidator(max: number) {\n  return (value: string): string | null => {\n    return value.length > max ? `Maximum length is ${max}` : null;\n  };\n}\n\nexport function minLengthValidator(min: number) {\n  return (value: string): string | null => {\n    return value.length < min ? `Minimum length is ${min}` : null;\n  };\n}\n\nexport function minLengthOrEmptyValidator(min: number) {\n  return (value: string): string | null => {\n    return value && value.length < min ? `Minimum length is ${min}` : null;\n  };\n}\n\nexport function emailValidator(value: string): string | null {\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return !emailPattern.test(value) ? 'Invalid email format' : null;\n}\n\nexport function numberValidator(value: string | number): string | null {\n  return isNaN(Number(value)) ? 'This field should be a number' : null;\n}\n"]}