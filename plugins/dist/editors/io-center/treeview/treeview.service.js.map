{"version":3,"file":"treeview.service.js","sourceRoot":"","sources":["../../../../src/editors/io-center/treeview/treeview.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs';\nimport {DataObject, DataObjectConnector} from \"../element-manager/data-object\";\n\nexport class TreeviewService {\n  private static instance: TreeviewService;\n\n  // These are all data objects that are displayed in the tree view but not selected\n  #treeDataObjects: BehaviorSubject<DataObject[]> = new BehaviorSubject<DataObject[]>([]);\n  treeDataObjects$ = this.#treeDataObjects.asObservable();\n\n  // This is the current selected data object in the tree view\n  #selectedDataObject: Subject<DataObject> = new Subject<DataObject>();\n  selectedDataObject$ = this.#selectedDataObject.asObservable();\n  #lastSelectedDataObject: DataObject | undefined = undefined;\n\n  private constructor() {}\n\n  public static getInstance(): TreeviewService {\n    if (!TreeviewService.instance) {\n      TreeviewService.instance = new TreeviewService();\n    }\n    return TreeviewService.instance;\n  }\n\n  setSelectedDataObject(dataObject: DataObject) {\n    this.#selectedDataObject.next(dataObject);\n    this.#lastSelectedDataObject = dataObject;\n  }\n\n  clearTreeDataObjects() {\n    this.#selectedDataObject.next(undefined);\n    this.#treeDataObjects.next([]);\n  }\n\n  /*\n  This function parses the data objects from the XML document and filters them based on the target CDCs.\n   */\n  parseDataObjectsFromXML(doc: XMLDocument, ied: string, targetCdcs: string[]) {\n    const targetCdcSet = new Set(targetCdcs);\n    const dataObjects: DataObject[] = [];\n\n    // Find the IED element\n    const iedElement = doc.querySelector(`IED[name=\"${ied}\"]`);\n    if (!iedElement) {\n      console.error(`IED with name ${ied} not found`);\n      return [];\n    }\n\n    // Parse all LDevices\n    const lDevices = Array.from(iedElement.querySelectorAll(\"LDevice\"));\n    lDevices.forEach(lDevice => {\n      const ldRef = lDevice.getAttribute(\"inst\") || \"\";\n\n      // Parse all LN elements within each LDevice\n      const lnElements = Array.from(lDevice.querySelectorAll(\"LN\"));\n      lnElements.forEach(ln => {\n        const lnClass = ln.getAttribute(\"lnClass\") || \"\";\n        const lnInst = ln.getAttribute(\"inst\") || \"\";\n        const lnType = ln.getAttribute(\"lnType\") || \"\";\n\n        // Get the DO elements for this LN\n        const lnNodeType = doc.querySelector(`LNodeType[id=\"${lnType}\"]`);\n        if (!lnNodeType) {\n          return;\n        }\n\n        const doElements = Array.from(lnNodeType.querySelectorAll(\"DO\"));\n        doElements.forEach(doElement => {\n          const name = doElement.getAttribute(\"name\") || \"\";\n          const cdc = this.getDoType(doElement, doc, targetCdcSet);\n          if (!cdc) {\n            return;\n          }\n\n          const connectorType: \"input\" | \"output\" = lnClass.endsWith(\"I\") ? \"output\" : \"input\";\n          const connectors: DataObjectConnector[] = [{\n            id: crypto.randomUUID(),\n            name: name,\n            type: connectorType\n          }];\n\n          const fullPath = `${ldRef}.${lnClass}-${lnInst}.${name}`;\n\n          dataObjects.push({\n            id: crypto.randomUUID(),\n            name: name,\n            type: \"DO\",\n            lnClass: lnClass,\n            lnInst: lnInst,\n            ldRef: ldRef,\n            path: fullPath,\n            connectors: connectors\n          });\n        });\n      });\n    });\n\n    this.#treeDataObjects.next(dataObjects);\n  }\n\n  /*\n  This function returns the CDC type of a DO element if it is in the target CDC set. Otherwise, it returns undefined.\n   */\n  private getDoType(doElement: Element, doc: XMLDocument, targetCdcSet: Set<string>): string | undefined {\n    const type = doElement.getAttribute(\"type\") || \"\";\n    if (type === \"\") {\n      return undefined;\n    }\n\n    const doType = doc.querySelector(`DOType[id=\"${type}\"]`);\n    if (!doType) {\n      return undefined;\n    }\n\n    const cdc = doType.getAttribute(\"cdc\") || \"\";\n    if (cdc === \"\" || !targetCdcSet.has(cdc.toLowerCase())) {\n      return undefined;\n    }\n\n    return cdc;\n  }\n\n  get lastSelectedDataObject(): DataObject | undefined {\n    return this.#lastSelectedDataObject;\n  }\n}\n"]}